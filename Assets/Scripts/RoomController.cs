using System.Collections.Generic;using System.Linq;using UnityEngine;using Utils;public class RoomController : MonoBehaviour{    public Room prefab;    public Room spawnRoomPrefab;    private Graph<Room> _graph;    //private List<Room> Rooms = new List<Room>();  //  private ObjectPool<Room> _roomObjectPool;    private Room _currentPlayerRoom;    private Room _previousPlayerRoom = null;    private void Awake()    {        const int roomCount = 5;       // _roomObjectPool = new ObjectPool<Room>(roomCount, prefab, transform);        var rooms = new List<Room> {Instantiate(spawnRoomPrefab, transform)};        rooms.AddRange(Enumerable.Range(0, roomCount - 1).Select(_ =>        {            var room = Instantiate(prefab, transform);            room.gameObject.SetActive(false);            return room;        }).ToList());        foreach (var room in rooms)        {            room.RoomChanged += OnRoomChanged;        }        _graph = RoomGraphFactory.CircularGraph(rooms);                _currentPlayerRoom = _graph.Root;        CreateRoomNeighbours(_currentPlayerRoom);    }    private Room InitializeRoom(Room initialized, Vector3 doorPosition, Vector3 direction)    {        var position = direction.normalized *                       Mathf.Abs(                           Vector3.Dot(direction.normalized, -initialized.transform.Find("EntryDoorPos").position));        initialized.transform.position = position + doorPosition;        initialized.gameObject.SetActive(true);        initialized.RoomChanged += OnRoomChanged;        return initialized;    }    private void DisposeRoom(Room room)    {        room.gameObject.SetActive(false);        room.transform.position = Vector3.zero;    }    private void CreateRoomNeighbours(Room room)    {        for (var i = 0; i < room.DoorLocations.Count; i++)        {            var doorLocation = room.DoorLocations[i];            var position = doorLocation.position;            var direction = position - room.transform.position;           // Debug.Log($"SÄ…siady:  {room.Neighbours.Count}");            InitializeRoom(room.Neighbours[i], position, direction);        }    }    private void OnRoomChanged(Room room)    {        if (room == _currentPlayerRoom) return;                Debug.Log("Changed current room");        CreateRoomNeighbours(room);        _previousPlayerRoom = _currentPlayerRoom;        _currentPlayerRoom = room;        foreach (var neighbour in _previousPlayerRoom.Neighbours)        {            if (neighbour != _currentPlayerRoom && neighbour != _previousPlayerRoom)            {                Debug.Log("disposing room");                DisposeRoom(neighbour);            }        }    }}