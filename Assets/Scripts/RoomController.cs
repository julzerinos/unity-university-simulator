using System.Collections.Generic;using System.Linq;using UnityEngine;using Utils;public class RoomController : MonoBehaviour{    public Room prefab;    public Room spawnRoomPrefab;    private Graph<Room> _graph;    //private List<Room> Rooms = new List<Room>();    private ObjectPool<Room> _roomObjectPool;    private Room _currentPlayerRoom;    private void Awake()    {        const int roomCount = 3;        _roomObjectPool = new ObjectPool<Room>(roomCount, prefab, transform);                var rooms = new List<Room>{Instantiate(spawnRoomPrefab,transform)};        rooms.AddRange(Enumerable.Range(0, roomCount - 1).Select(_ => _roomObjectPool.GetObject()).ToList());        _graph = RoomGraphFactory.CircularGraph(rooms);        var neighboursCount = _graph.Root.Neighbours.Count;        _currentPlayerRoom = _graph.Root;        CreateRoomNeighbours(_currentPlayerRoom);    }    private Room CreateRoom(Vector3 position)    {        var newRoom = _roomObjectPool.GetObject();        newRoom.transform.position = position;        newRoom.gameObject.SetActive(true);        newRoom.RoomChanged += OnRoomChanged;        return newRoom;    }    private void DisposeRoom(Room room)    {        room.gameObject.SetActive(false);    }    private void CreateRoomNeighbours(Room room)    {        foreach (var doorLocation in room.DoorLocations)        {            var position = doorLocation.position;            var direction = position - room.transform.position;            var roomCenter = direction.normalized *                             Mathf.Abs(Vector3.Dot(direction.normalized, room.GetComponent<Collider>().bounds.extents));            CreateRoom(roomCenter + position);        }    }    private void OnRoomChanged(Room room)    {        CreateRoomNeighbours(room);    }}